class ClassName
{
    void MethodName()
    {
        if (expr is Type v)
        {
            return;
        }

        if (expr is not null)
        {
            return;
        }

        if (MethodKind is not (MethodKind.Ordinary or MethodKind.LocalFunction))
        {
            return;
        }

        if (expr is < 'A' or > 'Z')
        {
            return;
        }

        Debug.Assert(result is Exception or IPAddress[] or IPHostEntry);

        if (expr is string { Length: 5 } s)
        {
            return;
        }

        var useLine =
            node.OperatorToken.Kind() is SyntaxKind.BarBarToken
                or SyntaxKind.BarToken
                or SyntaxKind.AmpersandAmpersandToken
                or SyntaxKind.AmpersandToken
                or SyntaxKind.PlusToken;
    }
}
